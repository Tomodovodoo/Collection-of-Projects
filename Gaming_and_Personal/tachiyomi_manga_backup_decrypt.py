# -*- coding: utf-8 -*-
"""Tachiyomi_manga_backup_decrypt.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kyStHkXqDfJynUsgUAmL_B6X5aTCrkVo
"""

# Tachiyomi / Mihon .tachibk to JSON with a Gradio GUI
import gzip, json, base64, typing as t, pathlib
import gradio as gr

def _read_varint(b: bytes, i: int) -> tuple[int, int]:
    v = s = 0
    while True:
        x = b[i]; i += 1
        v |= (x & 0x7F) << s
        if x < 0x80: return v, i
        s += 7

def _decode_msg(b: bytes, i: int = 0, end: int | None = None, depth: int = 0, max_depth: int = 3) -> tuple[dict[str, list[t.Any]], int]:
    if end is None: end = len(b)
    out: dict[str, list[t.Any]] = {}
    while i < end:
        tag, i = _read_varint(b, i)
        f, wt = tag >> 3, tag & 7
        if wt == 0:
            val, i = _read_varint(b, i)
        elif wt == 1:
            val = int.from_bytes(b[i:i+8], "little"); i += 8
        elif wt == 2:
            ln, i = _read_varint(b, i)
            blk = b[i:i+ln]; i += ln
            val: t.Any = None
            if depth < max_depth:
                try:
                    sub, used = _decode_msg(blk, 0, len(blk), depth+1, max_depth)
                    if used == len(blk) and sub: val = sub
                except Exception:
                    pass
            if val is None:
                try:
                    s = blk.decode("utf-8")
                    val = s if s.isprintable() or any(c in s for c in "\r\n\t") else base64.b64encode(blk).decode()
                except Exception:
                    val = base64.b64encode(blk).decode()
        elif wt == 5:
            val = int.from_bytes(b[i:i+4], "little"); i += 4
        else:
            break
        out.setdefault(str(f), []).append(val)
    return out, i

_TOPLEVEL = {
    "1": "manga",
    "2": "categories",
    "3": "extension_info",
    "4": "preferences",
    "5": "history",
    "6": "tracking",
    "100": "source_settings",
}

def _apply_field_map(obj: t.Any) -> t.Any:
    if isinstance(obj, dict):
        return { _TOPLEVEL.get(k, k): [_apply_field_map(vv) for vv in v] for k, v in obj.items() }
    if isinstance(obj, list):
        return [_apply_field_map(x) for x in obj]
    return obj

def _read_backup(path: pathlib.Path) -> bytes:
    data = path.read_bytes()
    try:
        return gzip.decompress(data)
    except Exception:
        return data

def decode_tachibk(file_path: str | None) -> tuple[str, str]:
    if not file_path: raise gr.Error("Upload a .tachibk")
    src = pathlib.Path(file_path)
    if src.suffix not in (".tachibk", ".gz"): raise gr.Error("Unexpected extension")
    raw = _read_backup(src)
    tree, _ = _decode_msg(raw)
    tree = _apply_field_map(tree)
    out_path = src.with_suffix(".json")
    out_path.write_text(json.dumps(tree, indent=2, ensure_ascii=False))
    sz = out_path.stat().st_size / 1_048_576
    return str(out_path), f"OK · {sz:.1f} MB"

with gr.Blocks(title="Tachibk Decoder") as demo:
    gr.Markdown("## Tachiyomi / Mihon Backup → JSON")
    with gr.Row():
        inp = gr.File(label=".tachibk file", type="filepath", file_types=[".tachibk", ".gz"])
        btn = gr.Button("Decode ➜", variant="primary")
    out_file = gr.File(label="Download JSON")
    out_msg = gr.Markdown()
    btn.click(decode_tachibk, inp, [out_file, out_msg])

if __name__ == "__main__":
    demo.launch()