# -*- coding: utf-8 -*-
"""Deadline_Penalty_curve.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B0m7XowfeQLIBClSXdMGx7EsVP6Tg44X
"""

import matplotlib.pyplot as plt
import numpy as np

def calculate_k(performance_percentage, allowed_performance_deviation):
    """Scaling factor that controls how steeply accuracy drops."""
    return (1 / performance_percentage - 1) / allowed_performance_deviation

def calculate_accuracy(excess_time, desired_timeframe, performance_percentage, allowed_performance_deviation):
    """Calculate accuracy (0â€“100%) given excess time over the desired timeframe."""
    k = calculate_k(performance_percentage, allowed_performance_deviation)
    excess_percentage = (excess_time / desired_timeframe) * 100
    accuracy = 1 / (1 + k * (excess_percentage / 100))
    return accuracy * 100

desired_timeframe = 10
performance_percentage = 0.8
allowed_performance_deviation = 0.3

excess_times = np.linspace(0, 50, 200)
percentage_excess = excess_times / desired_timeframe * 100
accuracies = [calculate_accuracy(e, desired_timeframe, performance_percentage, allowed_performance_deviation)
              for e in excess_times]

plt.plot(percentage_excess, accuracies, label='Accuracy')
plt.axhline(y=performance_percentage * 100, color='r', linestyle='--',
            label=f'Minimal Performance ({performance_percentage*100:.0f}%)')
plt.xlabel('Excess / Desired Timeframe (%)')
plt.ylabel('Accuracy (%)')
plt.title('Accuracy vs. Excess/Desired Timeframe')
plt.legend()
plt.grid(True)
plt.show()