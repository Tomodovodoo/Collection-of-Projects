# -*- coding: utf-8 -*-
"""Decompose reducible representation automatically.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JHVjWb91Z-vtBnvHrpKrn0FMILno6_uJ
"""

from math import gcd
from functools import reduce

def decompose_reducible(reducible_chars):
    class_sizes = [1, 2, 3, 1, 2, 3]
    irreps = {
        "A1'":  [1,  1,  1,  1,  1,  1],
        "A2'":  [1,  1, -1,  1,  1, -1],
        "E'":   [2, -1,  0,  2, -1,  0],
        "A1''": [1,  1,  1, -1, -1, -1],
        "A2''": [1,  1, -1, -1, -1,  1],
        "E''":  [2, -1,  0, -2,  1,  0],
    }
    h = sum(class_sizes)

    results = {}
    for irrep_name, chi in irreps.items():
        s = sum(n * r * c for n, r, c in zip(class_sizes, reducible_chars, chi))
        coeff = s / h
        results[irrep_name] = coeff

    return results

def find_smallest_scaling_factor(coefficients):
    # Convert floats to fractions and find least common multiple of denominators
    from fractions import Fraction

    denominators = [Fraction(c).limit_denominator().denominator for c in coefficients]

    def lcm(a, b):
        return a * b // gcd(a, b)

    scaling_factor = reduce(lcm, denominators, 1)
    return scaling_factor

# Original reducible representation
reducible = [18, 0, -2, 4, -2, 4]

decomp = decompose_reducible(reducible)
coeffs = list(decomp.values())

# Find smallest scaling factor to make all coeffs integers
scaling_factor = find_smallest_scaling_factor(coeffs)
print(f"Smallest scaling factor: {scaling_factor}")
scaled_reducible = [x * scaling_factor for x in reducible]
print(f"Scaled reducible representation: {scaled_reducible}")
scaled_decomp = decompose_reducible(scaled_reducible)

print("Decomposition of scaled representation:")
for irrep, coeff in scaled_decomp.items():
    print(f"{coeff} {irrep}")